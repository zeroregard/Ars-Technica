//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0+'
}

base {
    version = "${minecraft_version}-${mod_version}"
    group = 'net.mcreator.ars_technica'
    archivesBaseName = 'ars_technica'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
// Comment the line below if you don't need to share the source jar (e.g. if nothing needs you as a dependency)
// java.withSourcesJar()

tasks.named('wrapper', Wrapper).configure {

    distributionType = Wrapper.DistributionType.BIN
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

neoForge {
    version = project.neo_version

    parchment {
        // Use your updated parchment mapping version for 1.21
        mappingsVersion = project.parchment_version
        minecraftVersion = "1.21"
    }

    runs {
        client {
            client()
            workingDirectory project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            programArgument "-mixin.config=ars_technica.mixins.json"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            workingDirectory project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            programArgument "--nogui"
            programArgument "-mixin.config=ars_technica.mixins.json"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            workingDirectory project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            programArgument "-mixin.config=ars_technica.mixins.json"
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

sourceSets.main.resources { srcDir "src/generated/resources" }


repositories {
    mavenCentral()
    flatDir {
        dirs 'externalmods'
    }

    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }

    maven {
        // Mixed mappings, Registrate, Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }

    maven {
        url "https://maven.tterrag.com/"
    }


    mavenLocal()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'Forge'
        url = "https://maven.minecraftforge.net"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
    maven { url 'https://jitpack.io' }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "ars_technica",
                "Specification-Vendor"    : "zeroregard",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : "zeroregard",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "ars_technica.mixins.json"
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


mixin {
    add sourceSets.main, "ars_technica.refmap.json"
}

idea {
    // Tell IDEA to always download sources/javadoc artifacts from maven.
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}